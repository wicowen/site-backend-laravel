version: 2.1

# circle ci orb's doc
# https://circleci.com/developer/orbs?filterBy=popular
orbs:
  browser-tools: circleci/browser-tools@1.4.1

workflows:
  backend_deploy:
    jobs:
      - prod_backend_deploy:
          name: "prod_backend_site"
          app: "site"
          deploy_version: "202305191456"
          filters:
            branches:
              only: main

jobs:
  prod_backend_deploy:
    docker:
      - image: cimg/php:8.1.19-browsers
    parameters:
      app:
        type: string
      deploy_version:
        type: string
    # environment:
    #   BUILD_PATH: dist

    steps:
      # - browser-tools/install-browser-tools
      - checkout

      - run:
          name: "list version"
          command: |
            php --version
            google-chrome --version

      - run:
          name: "Prepare Environment"
          command: |
            sudo apt update

      - run:
          name: "Install php sqlite ext"
          command: |
            sudo apt-get install php8.1-sqlite3

      - run:
          name: "Create environment file"
          command: |
            mv .env.testing .env

      # download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - composer-dependencies-<<parameters.deploy_version>>-{{ .Branch }}-<<parameters.app>>-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - composer-dependencies-<<parameters.deploy_version>>-{{ .Branch }}-<<parameters.app>>-

      - run:
          name: "Install Dependencies"
          command: composer install -n --prefer-dist

      - save_cache:
          key: composer-dependencies-<<parameters.deploy_version>>-{{ .Branch }}-<<parameters.app>>-{{ checksum "composer.json" }}
          paths:
            - ./vendor

      - run:
          name: "Generate App key"
          command: php artisan key:generate

      # prepare the database
      - run:
          name: "Create database and run migration"
          command: |
            touch database/database.sqlite
            php artisan migrate --env=testing

      # run phpunit tests
      - run:
          name: "Run Tests"
          command: php artisan test
